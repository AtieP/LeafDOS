BITS 16
ORG 0

;BOOTLOADER - FLOPPY DISTRIBUTION

JMP SHORT INIT
NOP

%DEFINE __BOOTLOADER__ ;TELL INCLUDE FILES WE ARE A BOOTLOADER

%INCLUDE "..\SPECS.INC"

INIT:
	MOV AX, 07C0H ;07C0 = 8192
	ADD AX, 544
	CLI ;DISABLE INTERRUPTS
	MOV SS, AX ;CHANGE STACK SEGMENT
	MOV SP, 4096
	STI
	MOV AX, 07C0H
	MOV DS, AX
	
	TEST DL, DL
	JZ OLD
	
	XOR AX, AX
	MOV ES, AX ;TOSHIBA BIOSES HAVES A BUG IN
	MOV DI, 0 ;ES:DI
	
	MOV [DISK.DRIVE_NUMBER], DL
	MOV AH, 8
	INT 13H
	JC READ.DISK_ERROR
	AND CX, 3FH
	MOV [DISK.SECTORS_PER_TRACK], CX
	MOVZX DX, DH
	ADD DX, 1
	MOV [DISK.SIDES], DX
OLD:
	XOR EAX,EAX
READ:
	MOV AX, 1
	CALL LOGICAL_TO_HTS
	MOV SI, BUFFER
	MOV BX, DS
	MOV ES, BX
	MOV BX, SI
	MOV AH, 2
	MOV AL, __DOS_SECTORS__ ;READ SECTORS
	PUSHA
.READ_DISK:
	POPA
	PUSHA
	STC
	INT 13H
	JNC .GIVE_DUMP
	CALL RESET_FLOPPY
	JNC .READ_DISK
	JMP .DISK_ERROR
.GIVE_DUMP:
	POPA
	MOV AX, DS ;PREPARE TO PUT STUFF ON BUFFER
	MOV ES, AX ;NOW FIRST FILE ENTRY IS IN BUFFER
	MOV DI, BUFFER
	
	MOV CX, 1536 ;READ MANY BYTES FROM FLOPPY DISK
	XOR AX, AX
.SEARCH_FILENAME:
	XCHG CX, DX
	
	MOV SI, .KERNEL_FILENAME
	MOV CX, 9
	REP CMPSB
	JE SHORT .FOUND_FILE_TO_LOAD
	
	ADD AX, 1
	MOV DI, BUFFER
	ADD DI, AX
	XCHG DX, CX
	LOOP .SEARCH_FILENAME
	JMP .FILE_NOT_FOUND
.FOUND_FILE_TO_LOAD:
	MOV AX, 0500H ;SEGMENT OUR STUFF
	MOV ES, AX
	MOV BX, 0

	MOV AH, 2
	MOV AL, __DOS_SECTORS__
	PUSH AX

	MOV DI, BUFFER
	MOV BX, DI
	
	MOV AX, 0500H ;SET BUFFER PAST WHAT WE HAVE ALREADY READ
	MOV ES, AX
	MOV BX, 0

	MOV AX, 1 ;READ FROM LOGICAL SECTOR 1
	CALL LOGICAL_TO_HTS
	
	POP AX
	PUSH AX
	
	STC
	INT 13H
	JNC .LOAD_FILE
	CALL RESET_FLOPPY
	JMP .FOUND_FILE_TO_LOAD
.LOAD_FILE:
	MOV SI, BUFFER ;TAKE BUFFER AS SOURCE
	ADD SI, WORD [.POINTER] ;BUFFER + AX = ACTUAL BYTE IN WICH WE ARE IN
	
	MOV AX, WORD [DS:SI]
	
	CMP AX, 0FF8H
	JAE .END

	INC WORD [.POINTER] ;INCRMENT ONE BYTE IN THE BUFFER
	
	JMP .LOAD_FILE
.END:
	POP AX ;AX IS OK
	MOV DL, [DISK.DRIVE_NUMBER] ;GIVE OUR KERNEL DRIVE NUMBER
	JMP 0500H:0009H ;SKIP FILENAME
	
	.POINTER					DW 0
	.SECT						DW 0
	
.FILE_NOT_FOUND:
	MOV SI, .FILE_NOT_FOUND_ERROR
	CALL PRINT_TEXT
	JMP REBOOT
	
.DISK_ERROR:
	JMP DISK_ERROR
	HLT
	
	.ERR						DB 'FLOPPY ERROR',0
	.KERNEL_FILENAME			DB 'KERNELSYS',0
	.FILE_NOT_FOUND_ERROR		DB 'KERNEL.SYS NOT FOUND',0
	.EOF						DW 0FF8H
	
;=======================================================================
;
;BOOT.IO - IO, BUT IS SO PRIMITIVE THAT MICRO KERNELS LAUGH AT IT
;
;=======================================================================

LOGICAL_TO_HTS:
	PUSH BX
	PUSH AX
	MOV BX, AX ;SAVE LOGICAL SECTOR
	XOR DX, DX
	DIV WORD [DISK.SECTORS_PER_TRACK]
	ADD DL, 01H ;SECTORS STARTS AT 1
	MOV CL, DL ;CL IS FOR SECTORS
	MOV AX, BX
	XOR DX, DX ;CALCULATE HEAD
	DIV WORD [DISK.SECTORS_PER_TRACK]
	XOR DX, DX
	DIV WORD [DISK.SIDES]
	MOV DH, DL ;HEADS/SIDE
	MOV CH, AL ;TRACK
	POP AX ;RESTORE AX AND BX
	POP BX
	MOV DL, BYTE [DISK.DRIVE_NUMBER] ;SAVE DEVICE NUMBER
	RET
	
RESET_FLOPPY:
	PUSH AX
	PUSH DX
	XOR AX, AX
	MOV DL, BYTE [DISK.DRIVE_NUMBER]
	STC
	INT 13H
	POP DX
	POP AX
	RET
	
PRINT_TEXT:
	PUSHA
	MOV AH, 0EH
.LOOP:
	LODSB ;GET BYTE FROM STRING
	CMP AL, 0 ;IS BYTE NULL TERMINATOR?
	JE .END
	INT 10H
	JMP .LOOP
.END:
	POPA ;RESTORE REGISTERS
	RET
	
REBOOT:
	XOR AX, AX
	INT 16H
	XOR AX, AX
	INT 19H
	
;WE HAVE SPACE FOR SOME DISK ERRORS

DISK_ERROR:
	CMP AX, 04H
	JE ERR2
	CMP AX, 05H
	JE ERR3
	CMP AX, 20H
	JE ERR5
	CMP AX, 06H
	JE ERR1
UNKNOWN:
	MOV SI, DISK_ERROR_STRING.UNKNOWN
	JMP PRINT_IT
ERR1:
	MOV SI, DISK_ERROR_STRING.FLOPPY_DISK_REMOVED
	JMP PRINT_IT
ERR2:
	MOV SI, DISK_ERROR_STRING.SECTOR_NOT_FOUND
	JMP PRINT_IT
ERR3:
	MOV SI, DISK_ERROR_STRING.RESET_FAILED
	JMP PRINT_IT
ERR5:
	MOV SI, DISK_ERROR_STRING.CONTROLLER_FAILED
	JMP PRINT_IT
PRINT_IT:
	CALL PRINT_TEXT
	JMP REBOOT

DISK_ERROR_STRING:
	.SECTOR_NOT_FOUND						DB 'SECTOR NOT FOUND',0		;04
	.RESET_FAILED							DB 'RESET FAILURE',0		;05
	.CONTROLLER_FAILED						DB 'CONTROLLER FAILURE',0	;20
	.UNKNOWN								DB 'DISK ERROR',0			;??
	.FLOPPY_DISK_REMOVED					DB 'FLOPPY DISK REMOVED',0	;06

TIMES 510-($-$$) DB 0
DW 0AA55H

BUFFER:
