BITS 16

JMP START_KERNEL ;JUMP TO START KERNEL DIRECTLY
NOP

FILE_DATA:
	.FILENAME 				DB 'KERNEL' ;FILE NAME, 6 CHARACTERS
	.EXTENSION				DB 'SYS' 	;EXTENSION, 3 CHARATCERS

CALL_REFERENCES:
	JMP AFPFS_FILENAME						;000DH
	JMP DISK_LOAD_FILE						;0010H
	JMP DISK_ERROR							;0013H
	JMP DISPLAY_PRINT_CHAR					;0016H
	JMP DISPLAY_PRINT_TEXT					;0019H
	JMP KEYBOARD_INPUT						;001CH
	JMP KEYBOARD_KEYPRESS					;001FH
	JMP LOGICAL_TO_HTS						;0022H
	JMP MEMORY_COPY							;0025H
	JMP MEMORY_COPY_BYTE					;0028H
	JMP MEMORY_DESTROY_TABLE				;002BH
	JMP MEMORY_MANAGE						;002EH
	JMP RESET_DISK							;0031H
	JMP SERIAL_ENABLE						;0034H
	JMP SERIAL_GET_BYTE						;0037H
	JMP SERIAL_PORTS_CHECK					;003AH
	JMP SERIAL_SEND_BYTE					;003DH
	JMP SERIAL_SEND_BYTES					;0040H
	JMP STRING_CHECK_CHARACTER_IN_LOCATION	;0043H
	JMP STRING_COMPARE						;0046H
	JMP STRING_COPY							;0049H
	JMP STRING_HAS_CHARACTER				;004CH
	JMP STRING_IS_EMPTY						;004FH
	JMP STRING_LENGHT						;0052H
	JMP STRING_REPLACE_CHARACTER			;0055H
	JMP STRING_REVERSE						;0058H
	JMP STRING_TOKENIZE						;005BH
	JMP SYSTEM_REBOOT						;005EH

%INCLUDE "..\IO.INC"
											
START_KERNEL:
	CLI ;FLUSH INTERRUPTS
	XOR AX, AX ;SET STACK
	MOV SS, AX ;POINT AT STACK ELEMENT 0
	MOV SP, 0FFFFH ;STACK IS PLACED AT THE END OF OUR SEGMENT'S ADDRESS
	STI ;RESTORE INTERRUPTS
	CLD ;GO UP IN THE RAM
	MOV AX, _KERNEL_ 	;AFTER THIS WE SHOULDNT
	MOV DS, AX			;BOTHER ABOUT SEGMENTS ANYMORE
	MOV ES, AX			;WELL, NOT YET
	MOV FS, AX
	MOV GS, AX
	TEST DL, DL
	JZ .OLD
	MOV [DISK_INFO.DRIVE_NUMBER], DL ;SAVE DEVICE NUMBER
	PUSH ES
	MOV AH, 8
	INT 13H
	POP ES
	AND CX, 3FH
	MOV [DISK_INFO.SECTORS_PER_TRACK], CX
	MOVZX DX, DH
	ADD DX, 1
	MOV [DISK_INFO.SIDES], DX
.OLD:
	XOR EAX, EAX
;KERNEL INIT
;THIS LABEL INDICATES WHEN THE
;NAME AND THE VERSION OF LEAFDOS ARE SHOWN
INIT:
	MOV SI, KERNEL_TEXT.OS_NAME ;PRINT OS NAME AND VERSION
	CALL DISPLAY_PRINT_TEXT
	PUSHA
	MOV AL, ' ' ;SPACE BETWEN VERSION AND NAME
	CALL DISPLAY_PRINT_CHAR
	POPA
	MOV SI, KERNEL_TEXT.OS_VERSION ;VERSION
	CALL DISPLAY_PRINT_TEXT
	MOV SI, KERNEL_TEXT.NEWLINE
	CALL DISPLAY_PRINT_TEXT
;NOW WE ARE LOOPING DISPLAYING THE DRIVER NUMBER
KERNEL_LOOP:
	PUSH SI
	MOV SI, KERNEL_TEXT.NEWLINE
	CALL DISPLAY_PRINT_TEXT
	POP SI
	
	PUSH AX
	MOV AL, 'A' ;(A+DEV_NUM) = A OR B
	ADD AL, BYTE [DISK_INFO.DRIVE_NUMBER]
	CALL DISPLAY_PRINT_CHAR
	MOV AL, ':'
	CALL DISPLAY_PRINT_CHAR
	MOV AL, '\'
	CALL DISPLAY_PRINT_CHAR
	MOV AL, '>'
	CALL DISPLAY_PRINT_CHAR
	POP AX

	PUSH_ALL
	MOV CH, 10 ;LIMIT IS 9 CHARACTERS
	MOV DI, KEYBOARD_BUFFER ;KEYBOARD BUFFER IS KEYBOARD BUFFER
	CALL KEYBOARD_INPUT ;GET KEYBOARD INPUT
	MOV SI, KEYBOARD_BUFFER ;BLANK LINES ARE IGNORED
	LODSB
	CMP AL, 31 ;ANYTHING BELOW SPACE CHAR IS BLANK LINE
	JLE KERNEL_LOOP
	POP_ALL
	
	PUSH SI
	MOV SI, KERNEL_TEXT.NEWLINE
	CALL DISPLAY_PRINT_TEXT
	POP SI
	
	PUSH_INDEXES
	MOV SI, KEYBOARD_BUFFER ;CONVERT KEYBOARD BUFFER INTO
	MOV DI, PROGRAM_TO_LOAD ;A USEFUL FILENAME
	CALL AFPFS_FILENAME
	POP_INDEXES
	
	;IS IT THE KERNEL?
	PUSH_INDEXES ;KERNEL DOSENT EXISTS.
	MOV SI, PROGRAM_TO_LOAD ;JUST KIDDING
	MOV DI, KERNEL_FILENAME ;IT DOES
	CALL STRING_COMPARE ;BUT THE USER IS TRICKED
	JC .NOT_FOUND
	POP_INDEXES

	MOV SI, PROGRAM_TO_LOAD ;LOAD OUR PROGRAM
	MOV AX, _PROGRAM_
	CALL DISK_LOAD_FILE
	JNC .LOAD_BINARY
	JMP .NOT_FOUND
.LOAD_BINARY:
	CALL 2000H:0000H
	JMP KERNEL_LOOP
	
.NOT_FOUND:
	MOV AL, '<'
	CALL DISPLAY_PRINT_CHAR
	MOV SI, PROGRAM_TO_LOAD
	CALL DISPLAY_PRINT_TEXT
	MOV AL, '>'
	CALL DISPLAY_PRINT_CHAR
	MOV AL, 20H
	CALL DISPLAY_PRINT_CHAR
	MOV SI, KERNEL_TEXT.ERROR_UNKNOWN_COMMAND
	CALL DISPLAY_PRINT_TEXT
	JMP KERNEL_LOOP
	
	.PTR						DW 0
	.SECT						DW 0
	.FILENAME					DW 0
	.SEGMENT					DW 0

%INCLUDE "IO.ASM"

;1474560 BYTES!
;SUBSTRACT 512 (BOOTSECTOR) AND WE HAVE MADE OUR OWN FLOPPY!

KERNEL_FILENAME DB 'KERNELSYS',0 ;PREVENT USER FROM LOADING KERNEL

.EOF			DW 0FF8H

TIMES 2560-($-$$) DB 0
