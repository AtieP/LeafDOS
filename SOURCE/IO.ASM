CLUSTER			DW 0
POINTER			DW 0

;IN = SI: STRING
;OUT = N/A
PRINT_TEXT:
	PUSHA
	MOV AH, 0EH
.LOOP:
	LODSB ;GET BYTE FROM STRING
	CMP AL, 0 ;IS BYTE NULL TERMINATOR?
	JE .END
	INT 10H
	JMP .LOOP
.END:
	POPA ;RESTORE REGISTERS
	RET
	
;IN = AL: CHARACTER
;OUT = N/A
PRINT_CHAR:
	PUSHA
	MOV AH, 0Eh
	INT 10H
	POPA
	RET
	
;IN = N/A
;OUT = AL: CHARACTER PRESSED
KEYPRESS:
	XOR AX, AX
	INT 16H
	RET
	
;IN = CH: NUMBER OF CHARS TO READ
;OUT = DI: STRING
KEYBOARD_INPUT:
	PUSH AX
	PUSH CX
	XOR CL, CL
.LOOP:
	MOV AH, 0
	INT 16H
	
	CMP AL, 13 ;NEWLINE (ENTER)
	JE .END
	CMP AL, 8 ;BACKSPACE
	JE .BACK
	CMP CL, CH ;DID WE INPUTED MORE CHARS THAN THE ONES WE SHOULD?
	JGE .END
	CMP AL, 'a' ;ALL UPPERCASE, NO LOWERCASE!
	JGE .IS_LOWERCASE
.PRINT_PART:
	MOV AH, 0EH
	INT 10H
	INC CL
	STOSB
	JMP .LOOP
.IS_LOWERCASE:
	CMP AL, 'z'
	JLE .OK_LOWERCASE
	JMP .PRINT_PART
.OK_LOWERCASE:
	SUB AL, 27+5 ;LOWERCASE-(27+5) = UPPERCASE
	JMP .PRINT_PART
.BACK:
	CMP CL, 0
	JE .LOOP
	DEC DI
	MOV BYTE [DI], 0
	DEC CL
	MOV AH, 0EH
	MOV AL, 8
	INT 10H
	MOV AL, ' '
	INT 10H
	MOV AL, 8
	INT 10H
	JMP .LOOP
.END:
	MOV AL, 0
	STOSB
	POP CX
	POP AX
	RET
	
;IN = SI: SOURCE, DI: DESTINATION, AX: BYTES TO COPY
;OUT = N/A
COPY_MEMORY:
	PUSHA
.LOOP:
	CMP AX, 0 ;DID WE ENDED YET?
	JE .END
	DEC AX ;DECREMENT AX AND COPY DATA
	LODSB ;GRAB
	STOSB ;PUT
	JMP .LOOP
.END:
	POPA
	RET

;IN = AL: CHAR TO COPY, DI: DESTINATION, AX: TIMES TO COPY CHAR
;OUT = N/A
COPY_CHAR_TO_MEMORY:
	PUSHA
.LOOP:
	CMP AX, 0 ;IF WE ENDED, END
	JE .END
	DEC AX
	STOSB
	JMP .LOOP
.END:
	POPA
	RET

;IN = N/A
;OUT = N/A
REBOOT:
	XOR AX, AX
	INT 16H
	XOR AX, AX
	INT 19H
	
;IN = N/A
;OUT = AL: CHARACTER PRESSED
WAIT_FOR_KEYPRESS:
	XOR AX, AX
	INT 16H
	RET
	
;IN = N/A
;OUT = AL: CHARACTER PRESSED
CHECK_KEYPRESS:
	MOV AH, 1 ;CHECK KEYPRESS
	INT 16H
	JZ .NO_KEYPRESS
	XOR AH, AH ;GET KEY IF PRESSED
	INT 16H
	JMP .END
.NO_KEYPRESS:
	XOR AX, AX
.END:
	RET
	
;IN = AX: INTEGER, BX: BASE (10 FOR DECIMAL, 16 FOR HEXADECIMAL, ETC)
;OUT = SI: STRING
DECIMAL_INTEGER_TO_STRING:
	PUSHA
	CMP AX, 0 ;ZERO IS ZERO
	JE .ZERO
	CMP BX, 0 ;ZERO BASE? WHAT?
	JE .ZERO
	XOR CX, CX
	MOV DI, .TEMP
.CONVERT:
	XOR DX, DX
	DIV BX
	INC CX
	PUSH DX
	CMP AX, 0
	JNE .CONVERT
.REVERSE: ;REVERSE ORDER STRINGS
	POP DX
	CMP BX, 10 ;USE LETTERS FOR SHIT
	JG .LETTER
	JMP .LOOP
.LETTER:
	ADD DL, 'A'-'0'
.LOOP:
	ADD DL, '0'
	MOV [DI], DL
	INC DI
	DEC CX
	JNZ .REVERSE
	JMP .END
.ZERO:
	MOV BYTE [DI], '0'
	JMP .END
.END:
	INC DI
	MOV BYTE [DI], 0 ;NULL TERMINATION IN STRING
	POPA
	MOV SI, .TEMP ;RESULTANT STRING IS SET TO SI
	RET
	.TEMP TIMES 8 DB 0
	
;IN = SI: KEYBOARD BUFFER (EXPRG.COM), DI: PLACE TO PUT FAT12 FILENAME
;OUT = DI: FAT12 READABLE FILENAME (EXPRG  COM)
FILENAME_TO_FAT12:
	PUSHA
	XOR CX, CX ;CX = 0
.LOOP:
	LODSB
	CMP AL, 0 ;NULL TERMINATOR
	JE .END
	CMP AL, '.' ;DOT
	JE .SPACE_LOOP
	CMP CX, 12 ;MORE THAN 11 CHARS
	JGE .END
	INC CX
	STOSB ;ELSE PUT THE CHAR
	JMP .LOOP
.SPACE_LOOP: ;PUT SPACES, UNTIL WE FIT 8.
	CMP CX, 8
	JE .LOOP
	MOV AL, ' '
	STOSB
	INC CX
	CMP CX, 8
	JL .SPACE_LOOP
	JMP .LOOP
.END:
	STOSB
	POPA
	RET

;IN = N/A
;OUT = N/A
RESET_FLOPPY:
	PUSH AX
	PUSH DX
	XOR AX, AX
	MOV DL, BYTE [FLOPPY.DEVICE_NUMBER]
	STC ;SET CARRY FLAG
	INT 13H
	POP DX
	POP AX
	RET

;IN = DH: ROW, DL: COLUMN
;OUT = N/A
GOTOXY:
	PUSHA
	MOV AH ,0x2
	INT 0x10
	POPA
	RET

;IN = N/A
;OUT = A NICE BLANK SCREEN :)
CLEAR_SCREEN:
	PUSHA
	MOV CX, 0
	MOV AH, 0x0E
	MOV AL, ' '
.LOOP:
	INT 0x10
	CMP CX, 2000 ;2000 = FULL SCREEN
	INC CX
	JNE .LOOP
	POPA
	RET

;IN = JMP TO SPECIFIC ERROR
;OUT = CORRESPONDING STRING DISPLAYED
DISK_ERROR:
	;LETS SEE WICH ERROR WE HAVE...
	CMP AX, 01H
	JE .INVALID_COMMAND
	CMP AX, 02H
	JE .ADDRESS_MARK_NOT_FOUND
	CMP AX, 03H
	JE .WRITE_PROTECTED
	CMP AX, 04H
	JE .SECTOR_NOT_FOUND
	CMP AX, 05H
	JE .RESET_FAILED
	CMP AX, 06H
	JE .FLOPPY_DISK_REMOVED
	CMP AX, 07H
	JE .BAD_PARAMETER_TABLE
	CMP AX, 08H
	JE .DMA_OVERRUN
	CMP AX, 09H
	JE .DMA_CROSSED_64K
	CMP AX, 0AH
	JE .BAD_SECTOR_FLAG
	CMP AX, 0BH
	JE .BAD_TRACK_FLAG
	CMP AX, 0CH
	JE .MEDIA_TYPE_NOT_FOUND
	CMP AX, 0DH
	JE .INVALID_NUMBER_OF_SECTORS
	CMP AX, 0EH
	JE .CONTROL_DATA_ADDRESS_MARK
	CMP AX, 0FH
	JE .DMA_ARBITRATION_LEVEL_OUT_OF_RANGE
	CMP AX, 10H
	JE .UNCORRECTABLE_CRC_ECC_DATA_ERROR
	CMP AX, 11H
	JE .ECC_CORRECTED_DATA_ERROR
	CMP AX, 20H
	JE .CONTROLLER_FAILED
	CMP AX, 40H
	JE .SEEK_FAILED
	CMP AX, 80H
	JE .DISK_TIME_OUT
	CMP AX, 0AAH
	JE .DRIVE_NOT_READY
	CMP AX, 0BBH
	JE .UNDEFINED_ERROR
	CMP AX, 0CCH
	JE .WRITE_FAULT
	CMP AX, 0E0H
	JE .STATUS_REGISTER_ERROR
	CMP AX, 0FFH
	JE .SENSE_OPERATION_FAILED
	JMP .UNKNOWN ;NOT ANY OF THE ABOVE? WOW, I CANT BELIEVE THAT
	.INVALID_COMMAND:
		MOV SI, DISK_ERROR_STRING.INVALID_COMMAND
		JMP .PRINT
	.ADDRESS_MARK_NOT_FOUND:
		MOV SI, DISK_ERROR_STRING.ADDRESS_MARK_NOT_FOUND
		JMP .PRINT
	.WRITE_PROTECTED:
		MOV SI, DISK_ERROR_STRING.WRITE_PROTECTED
		JMP .PRINT
	.SECTOR_NOT_FOUND:
		MOV SI, DISK_ERROR_STRING.SECTOR_NOT_FOUND
		JMP .PRINT
	.RESET_FAILED:
		MOV SI, DISK_ERROR_STRING.RESET_FAILED
		JMP .PRINT
	.FLOPPY_DISK_REMOVED:
		MOV SI, DISK_ERROR_STRING.FLOPPY_DISK_REMOVED
		JMP .PRINT
	.BAD_PARAMETER_TABLE:
		MOV SI, DISK_ERROR_STRING.BAD_PARAMETER_TABLE
		JMP .PRINT
	.DMA_OVERRUN:
		MOV SI, DISK_ERROR_STRING.DMA_OVERRUN
		JMP .PRINT
	.DMA_CROSSED_64K:
		MOV SI, DISK_ERROR_STRING.DMA_CROSSED_64K
		JMP .PRINT
	.BAD_SECTOR_FLAG:
		MOV SI, DISK_ERROR_STRING.BAD_SECTOR_FLAG
		JMP .PRINT
	.BAD_TRACK_FLAG:
		MOV SI, DISK_ERROR_STRING.BAD_TRACK_FLAG
		JMP .PRINT
	.MEDIA_TYPE_NOT_FOUND:
		MOV SI, DISK_ERROR_STRING.MEDIA_TYPE_NOT_FOUND
		JMP .PRINT
	.INVALID_NUMBER_OF_SECTORS:
		MOV SI, DISK_ERROR_STRING.INVALID_NUMBER_OF_SECTORS
		JMP .PRINT
	.CONTROL_DATA_ADDRESS_MARK:
		MOV SI, DISK_ERROR_STRING.CONTROL_DATA_ADDRESS_MARK
		JMP .PRINT
	.DMA_ARBITRATION_LEVEL_OUT_OF_RANGE:
		MOV SI, DISK_ERROR_STRING.DMA_ARBITRATION_LEVEL_OUT_OF_RANGE
		JMP .PRINT
	.UNCORRECTABLE_CRC_ECC_DATA_ERROR:
		MOV SI, DISK_ERROR_STRING.UNCORRECTABLE_CRC_ECC_DATA_ERROR
		JMP .PRINT
	.ECC_CORRECTED_DATA_ERROR:
		MOV SI, DISK_ERROR_STRING.ECC_CORRECTED_DATA_ERROR
		JMP .PRINT
	.CONTROLLER_FAILED:
		MOV SI, DISK_ERROR_STRING.CONTROLLER_FAILED
		JMP .PRINT
	.SEEK_FAILED:
		MOV SI, DISK_ERROR_STRING.SEEK_FAILED
		JMP .PRINT
	.DISK_TIME_OUT:
		MOV SI, DISK_ERROR_STRING.DISK_TIME_OUT
		JMP .PRINT
	.DRIVE_NOT_READY:
		MOV SI, DISK_ERROR_STRING.DRIVE_NOT_READY
		JMP .PRINT
	.UNDEFINED_ERROR:
		MOV SI, DISK_ERROR_STRING.UNDEFINED_ERROR
		JMP .PRINT
	.WRITE_FAULT:
		MOV SI, DISK_ERROR_STRING.WRITE_FAULT
		JMP .PRINT
	.STATUS_REGISTER_ERROR:
		MOV SI, DISK_ERROR_STRING.STATUS_REGISTER_ERROR
		JMP .PRINT
	.SENSE_OPERATION_FAILED:
		MOV SI, DISK_ERROR_STRING.SENSE_OPERATION_FAILED
		JMP .PRINT
	.UNKNOWN:
		MOV SI, DISK_ERROR_STRING.UNKNOWN
	.PRINT:
		CALL PRINT_TEXT
		RET ;RETURN BACK, AND ACTUALLY SHOULD END THE MAIN CALLER SINCE
			;THIS FUNCTION IS SUPPOSED TO BE JUMPED ON, NOT CALLED ON
	
DISK_ERROR_STRING:
	.INVALID_COMMAND						DB 'INVALID COMMAND',0							;01
	.ADDRESS_MARK_NOT_FOUND					DB 'ADDRESS MARK NOT FOUND',0					;02
	.WRITE_PROTECTED						DB 'DISK IS WRITE PROTECTED',0					;03
	.SECTOR_NOT_FOUND						DB 'SECTOR NOT FOUND',0							;04
	.RESET_FAILED							DB 'DISK RESET FAILED',0						;05
	.FLOPPY_DISK_REMOVED					DB 'FLOPPY DISK WAS REMOVED',0					;06
	.BAD_PARAMETER_TABLE					DB 'BAD DISK PARAMETER TABLE',0					;07
	.DMA_OVERRUN							DB 'DMA OVERRUN',0								;08
	.DMA_CROSSED_64K						DB 'DMA CROSSED 64KB BOUNDARY',0				;09
	.BAD_SECTOR_FLAG						DB 'BAD SECTOR FLAG SET',0						;0A
	.BAD_TRACK_FLAG							DB 'BAD TRACK FLAG SET',0						;0B
	.MEDIA_TYPE_NOT_FOUND					DB 'MEDIA TYPE NOT FOUND',0						;0C
	.INVALID_NUMBER_OF_SECTORS				DB 'INVALID NUMBER OF SECTORS',0				;0D
	.CONTROL_DATA_ADDRESS_MARK				DB 'CONTROL ADDRESS MARK DETECTED',0			;0E
	.DMA_ARBITRATION_LEVEL_OUT_OF_RANGE		DB 'DMA ARBITRATION LEVEL OUT OF RANGE',0		;0F
	.UNCORRECTABLE_CRC_ECC_DATA_ERROR		DB 'UNCORRECTABLE CRC OR ECC DATA ERROR',0		;10
	.ECC_CORRECTED_DATA_ERROR				DB 'ECC CORRECTED DATA ERROR',0					;11
	.CONTROLLER_FAILED						DB 'CONTROLLER FAILED',0						;20
	.SEEK_FAILED							DB 'SEEK FAILURE',0								;40
	.DISK_TIME_OUT							DB 'DISK TIMEOUT',0								;80
	.DRIVE_NOT_READY						DB 'DRIVE NOT READY',0							;AA
	.UNDEFINED_ERROR						DB 'UNDEFINED ERROR',0							;BB
	.WRITE_FAULT							DB 'WRITE FAULT',0								;CC
	.STATUS_REGISTER_ERROR					DB 'STATUS_REGISTER_ERROR',0					;E0
	.SENSE_OPERATION_FAILED					DB 'SENSE OPERATION FAILED',0					;FF
	.UNKNOWN								DB 'UNKNOWN DISK ERROR',0						;??
