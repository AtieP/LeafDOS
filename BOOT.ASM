BITS 16

JMP SHORT INIT
NOP

META: ;DISK INFORMATION
	.OEM_LABEL					DB "LDOSLDOS"
	.BYTES_PER_SECTOR			DW 512
	.SECTORS_PER_CLUSTER		DB 1
	.RESERVED					DW 1
	.NUMBER_OF_FATS				DB 2
	.ROOT_DIRECTORY_ENTRIES		DW 224
	.LOGICAL_SECTORS			DW 2880
	.DESCRIPTOR_BYTE			DB 0F0H
	.SECTORS_PER_FAT			DW 9
	.SECTORS_PER_TRACK			DW 18
	.SIDES						DW 2
	.HIDDEN_SECTORS				DD 0
	.LARGE_SECTORS				DD 0
	.DRIVE_NUMBER				DW 0
	.SIGNATURE					DB 41
	.VOLUME_ID					DD 850EE0A7H
	.VOLUME_LABEL				DB "LEAFOS1.0DS"
	.FILE_SYSTEM				DB "FAT12   "

INIT:
	MOV AX, 07C0H ;07C0 = 8192
	ADD AX, 544
	CLI ;DISABLE INTERRUPTS
	MOV SS, AX ;CHANGE STACK SEGMENT
	MOV SP, 4096
	STI
	MOV AX, 07C0H
	MOV DS, AX
	CMP DL, 0
	JE OLD
	MOV [DEVICE_NUMBER], DL
	MOV AH, 8
	INT 13H
	JC DISK_ERROR
	AND CX, 3FH
	MOV [META.SECTORS_PER_TRACK], CX
	MOVZX DX, DH
	ADD DX, 1
	MOV [META.SIDES], DX
OLD:
	XOR EAX,EAX
READ:
	MOV AX, 19
	CALL LOGICAL_TO_HTS
	MOV SI, BUFFER
	MOV BX, DS
	MOV ES, BX
	MOV BX, SI
	MOV AH, 2
	MOV AL, 14
	PUSHA
READ_ROOT_DIRECTORY:
	POPA
	PUSHA
	STC
	INT 13H
	JNC SHORT SEARCH_DIRECTORY
	CALL RESET_FLOPPY
	JNC SHORT READ_ROOT_DIRECTORY
	JMP DISK_ERROR
SEARCH_DIRECTORY:
	POPA
	MOV AX, DS
	MOV ES, AX
	MOV DI, BUFFER
	MOV CX, WORD [META.ROOT_DIRECTORY_ENTRIES]
	XOR AX, AX
NEXT_ROOT_ENTRY:
	XCHG CX, DX
	MOV SI, FILENAME
	MOV CX, 11
	REP CMPSB
	JE SHORT FOUND_FILE
	ADD AX, 32
	MOV DI, BUFFER
	ADD DI, AX
	XCHG DX, CX
	LOOP NEXT_ROOT_ENTRY
	JMP DISK_ERROR
FOUND_FILE:
	MOV AX, WORD [ES:DI+0FH]
	MOV WORD [CLUSTER], AX
	MOV AX, 1
	CALL LOGICAL_TO_HTS
	MOV DI, BUFFER
	MOV BX, DI
	MOV AH, 2
	MOV AL, 9
	PUSHA
READ_FAT:
	POPA
	PUSHA
	STC
	INT 13H
	JNC SHORT READ_FAT_OK
	CALL RESET_FLOPPY
	JNC SHORT READ_FAT
	JMP DISK_ERROR
READ_FAT_OK:
	POPA
	MOV AX, 2000H
	MOV ES, AX
	XOR BX, BX
	MOV AH, 2
	MOV AL, 1
	PUSH AX
LOAD_FILE_SECTOR:
	MOV AX, WORD [CLUSTER]
	ADD AX, 31
	CALL LOGICAL_TO_HTS
	MOV AX, 2000H
	MOV ES, AX
	MOV BX, WORD [POINTER]
	POP AX
	PUSH AX
	STC
	INT 13H
	JNC SHORT CALCULATE_NEXT_CLUSTER
	CALL RESET_FLOPPY
	JMP SHORT LOAD_FILE_SECTOR
CALCULATE_NEXT_CLUSTER:
	MOV AX, [CLUSTER]
	XOR DX, DX
	MOV BX, 3
	MUL BX
	MOV BX, 2
	DIV BX
	MOV SI, BUFFER
	ADD SI, AX
	MOV AX, WORD [DS:SI]
	OR DX, DX
	JZ EVEN
ODD:
	SHR AX, 4
	JMP SHORT NEXT_CLUSTER_CONT
EVEN:
	AND AX, 0FFFH
NEXT_CLUSTER_CONT:
	MOV WORD [CLUSTER], AX
	CMP AX, 0FF8H
	JAE END
	ADD WORD [POINTER], 512
	JMP SHORT LOAD_FILE_SECTOR
END:
	POP AX
	MOV DL, BYTE [DEVICE_NUMBER] ;GIVE BOOTING DEVICE NUMBER TO KERNEL
	CLC ;CLEAR FLAG, BECAUSE WE ARE BOOTING AND WE ARE NOT A PROGRAM, D U H
	JMP 2000H:0000H

DISK_ERROR:
	MOV SI, MSG_DISK_ERROR
	CALL PRINT_TEXT
	XOR AX, AX
	INT 16H
	XOR AX, AX
	INT 19H

PRINT_TEXT:
	PUSHA
	MOV AH, 0EH
.LOOP:
	LODSB ;GET BYTE FROM STRING
	CMP AL, 0 ;IS BYTE NULL TERMINATOR?
	JE .END
	INT 10H
	JMP .LOOP
.END:
	POPA ;RESTORE REGISTERS
	RET

RESET_FLOPPY:
	PUSH AX
	PUSH DX
	XOR AX, AX
	MOV DL, BYTE [DEVICE_NUMBER]
	STC
	INT 13H
	POP DX
	POP AX
	RET

LOGICAL_TO_HTS:
	PUSH BX
	PUSH AX
	MOV BX, AX ;SAVE LOGICAL SECTOR
	XOR DX, DX
	DIV WORD [META.SECTORS_PER_TRACK]
	ADD DL, 01H ;SECTORS STARTS AT 1
	MOV CL, DL ;CL IS FOR SECTORS
	MOV AX, BX
	XOR DX, DX ;CALCULATE HEAD
	DIV WORD [META.SECTORS_PER_TRACK]
	XOR DX, DX
	DIV WORD [META.SIDES]
	MOV DH, DL ;HEADS/SIDE
	MOV CH, AL ;TRACK
	POP AX ;RESTORE AX AND BX
	POP BX
	MOV DL, BYTE [DEVICE_NUMBER] ;SAVE DEVICE NUMBER
	RET

FILENAME 		DB "KERNEL  SYS"
MSG_DISK_ERROR	DB "FLOPPY ERR",0

DEVICE_NUMBER 	DB 0
CLUSTER			DW 0
POINTER			DW 0

TIMES 510-($-$$) DB 0
DW 0AA55H

BUFFER:
