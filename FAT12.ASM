;IN = PROGRAM TO OPEN IN [DATA.PREVIOUS_BUFFER]
;OUT = PROGRAM AT MEMORY IN [MEMORY.PROGRAM_LOAD]
LOAD_PROGRAM:
	MOV AX, 19
	CALL LOGICAL_TO_HTS
	MOV SI, BUFFER
	MOV BX, DS
	MOV ES, BX
	MOV BX, SI
	MOV AH, 2
	MOV AL, 14 ;READ 14 SECTORS
	PUSHA
.READ_ROOT_DIRECTORY:
	POPA
	PUSHA
	STC ;SET CARRY FLAG
	INT 13H
	JNC .SEARCH_DIRECTORY ;IF SET, SUCESS
	CALL RESET_FLOPPY
	JNC .READ_ROOT_DIRECTORY ;ELSE, ITS ERROR
	JMP DISK_ERROR ;ERROR
.SEARCH_DIRECTORY:
	POPA
	MOV AX, DS ;PREPARE TO PUT STUFF ON BUFFER
	MOV ES, AX
	MOV DI, BUFFER
	MOV CX, WORD [FLOPPY.ROOT_DIRECTORY_ENTRIES]
	XOR AX, AX
.NEXT_ROOT_ENTRY:
	XCHG CX, DX ;COMPARE BYTES
	MOV SI, DATA.PROGRAM_TO_LOAD
	MOV CX, 11
	REP CMPSB
	JE .FOUND_FILE
	ADD AX, 32
	MOV DI, BUFFER
	ADD DI, AX
	XCHG DX, CX
	LOOP .NEXT_ROOT_ENTRY
	JMP .FILE_NOT_FOUND
.FOUND_FILE:
	MOV AX, WORD [ES:DI+0FH]
	MOV WORD [CLUSTER], AX
	MOV AX, 1
	CALL LOGICAL_TO_HTS
	MOV DI, BUFFER
	MOV BX, DI
	MOV AH, 2
	MOV AL, 9
	PUSHA
.READ_FAT:
	POPA
	PUSHA
	STC
	INT 13H
	JNC .READ_FAT_OK
	CALL RESET_FLOPPY
	JNC .READ_FAT
	JMP DISK_ERROR
.READ_FAT_OK:
	POPA
	MOV AX, WORD [MEMORY.PROGRAM_LOAD]
	MOV ES, AX
	XOR BX, BX
	MOV AH, 2
	MOV AL, 1
	PUSH AX
.LOAD_FILE_SECTOR:
	MOV AX, WORD [CLUSTER]
	ADD AX, 31
	CALL LOGICAL_TO_HTS
	MOV AX, WORD [MEMORY.PROGRAM_LOAD]
	MOV ES, AX
	MOV BX, WORD [POINTER]
	POP AX
	PUSH AX
	STC
	INT 13H
	JNC .CALCULATE_NEXT_CLUSTER
	CALL RESET_FLOPPY
	JMP .LOAD_FILE_SECTOR
.CALCULATE_NEXT_CLUSTER:
	MOV AX, [CLUSTER]
	XOR DX, DX
	MOV BX, 3
	MUL BX
	MOV BX, 2
	DIV BX
	MOV SI, BUFFER
	ADD SI, AX
	MOV AX, WORD [DS:SI]
	OR DX, DX
	JZ .EVEN
.ODD:
	SHR AX, 4
	JMP SHORT .NEXT_CLUSTER_CONT
.EVEN:
	AND AX, 0FFFH
.NEXT_CLUSTER_CONT:
	MOV WORD [CLUSTER], AX
	CMP AX, 0FF8H ;0F F8 = END OF FILE IN FAT12
	JAE .END
	ADD WORD [POINTER], 512
	JMP .LOAD_FILE_SECTOR
.END:
	POP AX
	STC
	RET
.FILE_NOT_FOUND:
	MOV SI, .FILE_WAS_NOT_FOUND
	CALL PRINT_TEXT
	CLC
	RET
	
	.FILE_WAS_NOT_FOUND		DB 'FILE WAS NOT FOUND',0
	
;IN = AX: LOGICAL SECTOR
;OUT = DL: DRIVE NUMBER, DH: HEAD, CH: TRACK, CL: SECTOR
LOGICAL_TO_HTS:
	PUSH BX
	PUSH AX
	MOV BX, AX ;SAVE LOGICAL SECTOR
	XOR DX, DX
	DIV WORD [FLOPPY.SECTORS_PER_TRACK]
	ADD DL, 01H ;SECTORS STARTS AT 1
	MOV CL, DL ;CL IS FOR SECTORS
	MOV AX, BX
	XOR DX, DX ;CALCULATE HEAD
	DIV WORD [FLOPPY.SECTORS_PER_TRACK]
	XOR DX, DX
	DIV WORD [FLOPPY.SIDES]
	MOV DH, DL ;HEADS/SIDE
	MOV CH, AL ;TRACK
	POP AX ;RESTORE AX AND BX
	POP BX
	MOV DL, BYTE [FLOPPY.DEVICE_NUMBER] ;SAVE DEVICE NUMBER
	RET
